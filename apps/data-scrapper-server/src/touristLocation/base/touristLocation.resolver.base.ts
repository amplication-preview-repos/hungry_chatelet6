/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TouristLocation } from "./TouristLocation";
import { TouristLocationCountArgs } from "./TouristLocationCountArgs";
import { TouristLocationFindManyArgs } from "./TouristLocationFindManyArgs";
import { TouristLocationFindUniqueArgs } from "./TouristLocationFindUniqueArgs";
import { CreateTouristLocationArgs } from "./CreateTouristLocationArgs";
import { UpdateTouristLocationArgs } from "./UpdateTouristLocationArgs";
import { DeleteTouristLocationArgs } from "./DeleteTouristLocationArgs";
import { TouristLocationService } from "../touristLocation.service";
@graphql.Resolver(() => TouristLocation)
export class TouristLocationResolverBase {
  constructor(protected readonly service: TouristLocationService) {}

  async _touristLocationsMeta(
    @graphql.Args() args: TouristLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TouristLocation])
  async touristLocations(
    @graphql.Args() args: TouristLocationFindManyArgs
  ): Promise<TouristLocation[]> {
    return this.service.touristLocations(args);
  }

  @graphql.Query(() => TouristLocation, { nullable: true })
  async touristLocation(
    @graphql.Args() args: TouristLocationFindUniqueArgs
  ): Promise<TouristLocation | null> {
    const result = await this.service.touristLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TouristLocation)
  async createTouristLocation(
    @graphql.Args() args: CreateTouristLocationArgs
  ): Promise<TouristLocation> {
    return await this.service.createTouristLocation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TouristLocation)
  async updateTouristLocation(
    @graphql.Args() args: UpdateTouristLocationArgs
  ): Promise<TouristLocation | null> {
    try {
      return await this.service.updateTouristLocation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TouristLocation)
  async deleteTouristLocation(
    @graphql.Args() args: DeleteTouristLocationArgs
  ): Promise<TouristLocation | null> {
    try {
      return await this.service.deleteTouristLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
