/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TouristLocationService } from "../touristLocation.service";
import { TouristLocationCreateInput } from "./TouristLocationCreateInput";
import { TouristLocation } from "./TouristLocation";
import { TouristLocationFindManyArgs } from "./TouristLocationFindManyArgs";
import { TouristLocationWhereUniqueInput } from "./TouristLocationWhereUniqueInput";
import { TouristLocationUpdateInput } from "./TouristLocationUpdateInput";

export class TouristLocationControllerBase {
  constructor(protected readonly service: TouristLocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TouristLocation })
  async createTouristLocation(
    @common.Body() data: TouristLocationCreateInput
  ): Promise<TouristLocation> {
    return await this.service.createTouristLocation({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        location: true,
        longitude: true,
        mapsUrl: true,
        name: true,
        pictures: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TouristLocation] })
  @ApiNestedQuery(TouristLocationFindManyArgs)
  async touristLocations(
    @common.Req() request: Request
  ): Promise<TouristLocation[]> {
    const args = plainToClass(TouristLocationFindManyArgs, request.query);
    return this.service.touristLocations({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        location: true,
        longitude: true,
        mapsUrl: true,
        name: true,
        pictures: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TouristLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async touristLocation(
    @common.Param() params: TouristLocationWhereUniqueInput
  ): Promise<TouristLocation | null> {
    const result = await this.service.touristLocation({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        location: true,
        longitude: true,
        mapsUrl: true,
        name: true,
        pictures: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TouristLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTouristLocation(
    @common.Param() params: TouristLocationWhereUniqueInput,
    @common.Body() data: TouristLocationUpdateInput
  ): Promise<TouristLocation | null> {
    try {
      return await this.service.updateTouristLocation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          latitude: true,
          location: true,
          longitude: true,
          mapsUrl: true,
          name: true,
          pictures: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TouristLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTouristLocation(
    @common.Param() params: TouristLocationWhereUniqueInput
  ): Promise<TouristLocation | null> {
    try {
      return await this.service.deleteTouristLocation({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          latitude: true,
          location: true,
          longitude: true,
          mapsUrl: true,
          name: true,
          pictures: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
